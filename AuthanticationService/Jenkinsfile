pipeline {
    agent any
    
    environment {
        NODE_VERSION = '22'
        DOCKER_IMAGE = "node:${NODE_VERSION}"
        DOCKER_HUB_CREDENTIALS = credentials('Docker')
        DOCKERFILE_PATH = './AuthanticationService/Dockerfile'
        DOCKER_HUB_REPO = 'muhammedadel/authentication-service'
    }
    
    stages {
        stage('Login to GitHub') {
            steps {
                script {
                    git branch: 'main',
                    credentialsId: 'Github',
                    url: 'https://github.com/mhamdadel/Micro_Framework_Nodejs.git'
                }
            }
        }
        
        stage('Build Docker Container') {
            steps {
                script {
                    dir('AuthenticationService') {
                        sh "docker build -t ${DOCKER_HUB_REPO}:latest ."
                    }
                }
            }
        }
        
        stage('Install Dependencies and Start Application') {
            steps {
                script {
                    dir('AuthenticationService') {
                        sh """
                        docker run --rm -v \${WORKSPACE}:/app ${DOCKER_HUB_REPO}:latest npm install
                        docker run --rm -v \${WORKSPACE}:/app ${DOCKER_HUB_REPO}:latest npm start
                        """
                    }
                }
            }
        }
        
        stage('Login to Docker') {
            steps {
                script {
                    dir('AuthenticationService') {
                        sh "echo ${DOCKER_HUB_CREDENTIALS_PSW} | docker login -u ${DOCKER_HUB_CREDENTIALS_USR} --password-stdin"
                    }
                }
            }
        }
        
        stage('Push Docker Image') {
            steps {
                script {
                    dir('AuthenticationService') {
                        sh "docker push ${DOCKER_HUB_REPO}:latest"
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo 'Docker logging out...'
            sh "docker logout"
            echo 'Pipeline completed!'
        }
        success {
            echo 'Pipeline succeeded! Deploy your application.'
        }
        failure {
            echo 'Pipeline failed! Take appropriate action.'
        }
    }
}
